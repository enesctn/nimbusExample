import { Express } from 'express';
import { RouteMap } from './route';
interface Options {
    /**
     * The headers to include in every response.
     */
    responseHeaders?: Record<string, string>;
    /**
     * The path to be used as a prefix for every route.
     */
    basePath?: string;
    /**
     * The path to be used as a prefix when navigating to a server driven view. By default, it will be the same as
     * `basePath`.
     */
    navigatorBasePath?: string;
}
/**
 * A Nimbus application is a set of routes registered to the express instance provided in the constructor.
 *
 * Each route provided in the constructor will be registered into express so, when it's requested, the related screen
 * (functional component) is called with an object containing:
 *
 * - request: the current express request object;
 * - response: the current express response object;
 * - navigator: a Navigator, i.e. a strictly typed structure that makes it easier and safer to use navigation actions.
 */
export declare class NimbusApp {
    private express;
    /**
     * @param express the instance of express to register the routes to.
     * @param routes the route map, i.e. a map where the keys are the route names (strings) and the values are any of the
     * following:
     * 1. The functional component to render, i.e. a function that returns a JSX element.
     * 2. An object containing the properties `method`, which is the http method to use for the route; and `screen`, which
     * is the functional component to render.
     *
     * Note that the route name is gonna be combined with the basePath and be directly passed to express, i.e. everything
     * accepted by express in the route name is accepted here.
     * @param options the response headers common to every request and the basePath.
     */
    constructor(express: Express, routes: RouteMap, options?: Options);
    private responseHeaders;
    private basePath;
    private navigator;
    private expressMethodParser;
    private addRoute;
    private addRouteMap;
}
export {};
