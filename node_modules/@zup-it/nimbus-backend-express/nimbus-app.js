"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NimbusApp = void 0;
const lodash_1 = require("lodash");
const nimbus_backend_core_1 = require("@zup-it/nimbus-backend-core");
const actions_1 = require("@zup-it/nimbus-backend-core/actions");
const navigator_1 = require("./navigator");
/**
 * A Nimbus application is a set of routes registered to the express instance provided in the constructor.
 *
 * Each route provided in the constructor will be registered into express so, when it's requested, the related screen
 * (functional component) is called with an object containing:
 *
 * - request: the current express request object;
 * - response: the current express response object;
 * - navigator: a Navigator, i.e. a strictly typed structure that makes it easier and safer to use navigation actions.
 */
class NimbusApp {
    express;
    /**
     * @param express the instance of express to register the routes to.
     * @param routes the route map, i.e. a map where the keys are the route names (strings) and the values are any of the
     * following:
     * 1. The functional component to render, i.e. a function that returns a JSX element.
     * 2. An object containing the properties `method`, which is the http method to use for the route; and `screen`, which
     * is the functional component to render.
     *
     * Note that the route name is gonna be combined with the basePath and be directly passed to express, i.e. everything
     * accepted by express in the route name is accepted here.
     * @param options the response headers common to every request and the basePath.
     */
    constructor(express, routes, options = {}) {
        this.express = express;
        this.responseHeaders = options.responseHeaders ?? {};
        this.basePath = options.basePath ?? '';
        this.addRouteMap(routes);
        this.navigator = new navigator_1.Navigator(routes, options.navigatorBasePath ?? options.basePath);
    }
    responseHeaders;
    basePath;
    navigator;
    expressMethodParser = (method) => {
        switch (method) {
            case 'Get': return 'get';
            case 'Patch': return 'patch';
            case 'Put': return 'put';
            case 'Post': return 'post';
            case 'Delete': return 'delete';
            default: return 'get';
        }
    };
    addRoute = (screen, properties) => {
        const { method, path } = properties;
        this.express[this.expressMethodParser(method)](`${this.basePath}${path}`, (req, res) => {
            res.type('application/json');
            (0, lodash_1.forEach)(this.responseHeaders, (value, key) => res.setHeader(key, value));
            const componentTree = screen({
                request: req,
                response: res,
                navigator: this.navigator,
                getViewState: (name) => (0, nimbus_backend_core_1.createStateNode)(name),
                triggerViewEvent: (event, value) => (0, actions_1.triggerViewEvent)({ event, value }),
            });
            res.send((0, nimbus_backend_core_1.serialize)(componentTree));
        });
    };
    addRouteMap(routeMap) {
        (0, lodash_1.forEach)(routeMap, (value, key) => {
            if (typeof value === 'function')
                this.addRoute(value, { path: key });
            else
                this.addRoute(value.screen, { path: key, method: value.method });
        });
    }
}
exports.NimbusApp = NimbusApp;
