"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.componentValidation = void 0;
const lodash_1 = require("lodash");
class ComponentValidation {
    validations = [];
    /**
     * Adds a validation to the list of checks to perform. This validation is run for every component of the final UI
     * tree.
     *
     * The validation function must receive the validation node as parameter and return nothing. In case an error is
     * detected, an exception must be thrown.
     *
     * A {@link ValidationNode} is a {@link Component} with one additional attribute: the parent that spawned the node.
     *
     * @param validation the validation function.
     * @returns a function that, when called, removes the validation.
     */
    add(validation) {
        this.validations.push(validation);
        return () => {
            (0, lodash_1.remove)(this.validations, v => v === validation);
        };
    }
    validateRecursive(node, parent) {
        const current = { ...node, parent };
        this.validations.forEach(v => v(current));
        if (!node.children)
            return;
        const children = Array.isArray(node.children) ? node.children : [node.children];
        children.forEach(c => this.validateRecursive(c, current));
    }
    /**
     * Checks a component tree for errors.
     *
     * @param tree the Component at the root of the tree to check.
     */
    run(tree) {
        this.validateRecursive(tree);
    }
}
/**
 * Global object to register and run validations for the component tree. This is run just before the serialization and
 * is useful for checking nodes that depends on the rest of the tree.
 */
exports.componentValidation = new ComponentValidation();
