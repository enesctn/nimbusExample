"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serialize = void 0;
/* eslint-disable no-console */
const lodash_1 = require("lodash");
const constants_1 = require("../constants");
const component_1 = require("../model/component");
const action_1 = require("../model/action");
const state_node_1 = require("../model/state/state-node");
const operation_1 = require("../model/operation");
const __1 = require("..");
const utils_1 = require("../utils");
const getComponentActionName = (componentAction) => {
    const { namespace, name } = componentAction;
    return namespace === constants_1.coreNamespace
        ? name
        : `${componentAction.namespace ?? constants_1.genericNamespace}:${componentAction.name}`;
};
const asActionCall = (action) => ({
    '_:action': getComponentActionName(action),
    properties: action.properties ? transformExpressionsAndActions(action.properties ?? {}) : undefined,
});
const asActionCalls = (actions) => (Array.isArray(actions) ? actions.map(asActionCall) : [asActionCall(actions)]);
const asStateDeclaration = (state) => {
    const stateList = Array.isArray(state) ? state : [state];
    return stateList.reduce((result, item) => {
        const serializableValue = (operation_1.Operation.isOperation(item.value) || state_node_1.StateNode.isState(item.value))
            ? item.value.toString()
            : item.value;
        return { ...result, [item.path]: serializableValue ?? null };
    }, {});
};
const transformExpressionsAndActions = (value) => {
    const isActions = action_1.Action.isAction(value) || Array.isArray(value) && action_1.Action.isAction(value[0]);
    if (isActions)
        return asActionCalls(value);
    if (component_1.Component.isComponent(value))
        return asNimbusNode(value);
    if (state_node_1.StateNode.isState(value) || operation_1.Operation.isOperation(value))
        return value.toString();
    if (Array.isArray(value))
        return value.map(transformExpressionsAndActions);
    if (value && typeof value === 'object')
        return (0, lodash_1.mapValues)(value, transformExpressionsAndActions);
    return value;
};
const asNimbusNode = (component) => {
    const { children, state, id, properties } = component;
    const childrenArray = (Array.isArray(children) || !children) ? children : [children];
    return {
        '_:component': getComponentActionName(component),
        id,
        state: state ? asStateDeclaration(state) : undefined,
        children: (0, lodash_1.isEmpty)(childrenArray) ? undefined : childrenArray.map(asNimbusNode),
        properties: properties && !(0, lodash_1.isEmpty)(properties) ? transformExpressionsAndActions(properties) : undefined,
    };
};
/**
 * Transforms the entire Component tree into the JSON format expected by Nimbus.
 *
 * - Components become `{ '_:component': 'namespace:name', ... }`.
 * - Actions become `{ '_:action': 'namespace:name', ... }`.
 * - State declarations become `{ ..., state: { id: 'statePath', value: 'rootStateValue' } }`.
 * - References to states become: `"@{statePath}"`.
 * - Operations become: `"@{operationName(arguments)}"`.
 *
 * Attention: when in development mode, this function will also validate the component tree. To stop running the
 * validations, set NODE_ENV to something different than 'development'. To add validations to your own components,
 * use `componentValidation.add`.
 *
 * The validations are run after the JSX elements are translated to JS and before each component is serialized.
 *
 * @param componentTree the component tree to serialize
 * @returns the JSON string
 */
const serialize = (componentTree) => {
    if ((0, utils_1.isDevelopmentMode)()) {
        __1.componentValidation.run(componentTree);
    }
    return JSON.stringify(asNimbusNode(componentTree));
};
exports.serialize = serialize;
