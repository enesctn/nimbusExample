import { FC } from '../../../api';
import { IfProps, ThenElseProps } from './types';
/**
 * Controls which branch of the tree is rendered: `Then` or `Else`. If `condition` resolves to true, `Then` is rendered,
 * otherwise `Else` is rendered.
 *
 * Example: suppose `isLoading` is a state and it stores a boolean value.
 *
 * @example
 * ```tsx
 * <If condition={isLoading}>
 *   <Then><Text>Loading...</Text></Then>
 *   <Else><Text>Loading is completed!</Text></Else>
 * </If>
 * ```
 *
 * The children of `If` must always be one `Then`, one `Else` or both.
 *
 * @category Component
 * @param props the component properties. See: {@link IfProps}
 * @returns an instance of the component If
 */
export declare const If: FC<IfProps>;
/**
 * Should only be used inside an If component. See {@link If} for more details.
 *
 * @category Component
 * @param props the component properties. See: {@link ThenElseProps}
 * @returns an instance of the component Then
 */
export declare const Then: ({ children }: ThenElseProps) => import("../../../api").Component;
/**
 * Should only be used inside an If component. See {@link If} for more details.
 *
 * @category Component
 * @param props the component properties. See: {@link ThenElseProps}
 * @returns an instance of the component Else
 */
export declare const Else: ({ children }: ThenElseProps) => import("../../../api").Component;
