"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Else = exports.Then = exports.If = void 0;
const __1 = require("../..");
const constants_1 = require("../../../constants");
const validateChild = (child) => {
    if (!child)
        return;
    const { name, namespace } = child;
    const isValid = namespace === constants_1.coreNamespace && ['then', 'else'].includes(name);
    if (!isValid) {
        throw new Error(`The If component must only have the components Then and Else as children. Received: ${namespace}:${name}.`);
    }
};
/**
 * Controls which branch of the tree is rendered: `Then` or `Else`. If `condition` resolves to true, `Then` is rendered,
 * otherwise `Else` is rendered.
 *
 * Example: suppose `isLoading` is a state and it stores a boolean value.
 *
 * @example
 * ```tsx
 * <If condition={isLoading}>
 *   <Then><Text>Loading...</Text></Then>
 *   <Else><Text>Loading is completed!</Text></Else>
 * </If>
 * ```
 *
 * The children of `If` must always be one `Then`, one `Else` or both.
 *
 * @category Component
 * @param props the component properties. See: {@link IfProps}
 * @returns an instance of the component If
 */
const If = ({ children, ...props }) => {
    const thenElse = Array.isArray(children) ? children : [children];
    thenElse.forEach(validateChild);
    return __1.NimbusJSX.createElement("component", { namespace: constants_1.coreNamespace, name: "if", properties: props }, children);
};
exports.If = If;
/**
 * Should only be used inside an If component. See {@link If} for more details.
 *
 * @category Component
 * @param props the component properties. See: {@link ThenElseProps}
 * @returns an instance of the component Then
 */
const Then = ({ children }) => (__1.NimbusJSX.createElement("component", { namespace: constants_1.coreNamespace, name: "then" }, children));
exports.Then = Then;
/**
 * Should only be used inside an If component. See {@link If} for more details.
 *
 * @category Component
 * @param props the component properties. See: {@link ThenElseProps}
 * @returns an instance of the component Else
 */
const Else = ({ children }) => (__1.NimbusJSX.createElement("component", { namespace: constants_1.coreNamespace, name: "else" }, children));
exports.Else = Else;
