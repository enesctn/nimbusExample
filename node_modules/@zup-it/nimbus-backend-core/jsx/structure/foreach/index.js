"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForEach = void 0;
const __1 = require("../..");
const api_1 = require("../../../api");
const constants_1 = require("../../../constants");
const fragment_1 = require("../fragment");
const ForEach = ({ key, iteratorName, indexName, children, state, ...props }) => {
    /* `children` here is a function, and for this reason, its return value must be a new JSX tree, which will have its
    own root. The ForEach component though can have multiple children without wrapping everything in another component.
    For this reason, if the content is a fragment, it will be ignored, placing its children directly inside the
    ForEach. */
    const rawTemplate = children((0, api_1.createStateNode)(iteratorName ?? 'item'), (0, api_1.createStateNode)(indexName ?? 'index'));
    const template = rawTemplate.name == fragment_1.fragmentName ? rawTemplate.children : rawTemplate;
    return (__1.NimbusJSX.createElement("component", { namespace: constants_1.coreNamespace, state: state, name: "forEach", properties: { key, iteratorName, indexName, ...props } }, template));
};
exports.ForEach = ForEach;
