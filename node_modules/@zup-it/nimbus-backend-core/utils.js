"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.childrenToInterpolatedText = exports.hasAnyValue = exports.setupHotReloading = exports.isDevelopmentMode = exports.isDynamicExpression = void 0;
const constants_1 = require("./constants");
const state_node_1 = require("./model/state/state-node");
const operation_1 = require("./model/operation");
/**
 * Verifies if the value passed as parameter is an instance of StateNode or Operation. i.e. if it's a Nimbus
 * expression.
 *
 * @param data the value to check
 * @returns true if data is an instance of StateNode or Operation. False otherwise.
 */
const isDynamicExpression = (data) => state_node_1.StateNode.isState(data)
    || operation_1.Operation.isOperation(data);
exports.isDynamicExpression = isDynamicExpression;
/**
 * Checks if the program is running in development mode.
 *
 * @returns true if `process.env.NODE_ENV` is unset or `"development"`
 */
const isDevelopmentMode = () => (process.env.NODE_ENV ?? 'development') === 'development';
exports.isDevelopmentMode = isDevelopmentMode;
/**
 * Enables hot reloading if the environment is development and if the program has started with the environment variable
 * `HOT_RELOADING=true`.
 *
 * This must be called as soon as the server becomes available.
 *
 * @example
 * If you're using express:
 * ```typescript
 * const expressApp = express()
 *
 * expressApp.listen(port, () => {
 *  console.log(`App listening at http://localhost:${port}`)
 *  setupHotReloading()
 * })
 * ```
 */
function setupHotReloading() {
    if ((0, exports.isDevelopmentMode)() && process.env.HOT_RELOADING == 'true') {
        process.stdout.write(`${constants_1.hotReloadingString} if you're seeing this message, the hot reloading service has not started.`);
    }
}
exports.setupHotReloading = setupHotReloading;
/**
 * Checks if a map contains any value different than null or undefined.
 *
 * @param map the map to look for values.
 * @returns true if the map contains any value, false otherwise.
 */
const hasAnyValue = (map) => Object.values(map).some(v => v !== undefined && v !== null);
exports.hasAnyValue = hasAnyValue;
const stringable = (value) => typeof value !== 'object' || (0, exports.isDynamicExpression)(value);
const formatTextUnit = (text) => ((text && typeof text === 'object') ? JSON.stringify(text) : text ?? '');
const childrenToInterpolatedText = (children) => (Array.isArray(children) ? children : [children])
    .map(child => stringable(child) ? child : formatTextUnit(child))
    .join('');
exports.childrenToInterpolatedText = childrenToInterpolatedText;
