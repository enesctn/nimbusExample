"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStateNode = exports.StateNode = void 0;
const lodash_1 = require("lodash");
const set_state_1 = require("../../actions/set-state");
/**
 * For better typing, you should use `createStateNode<T>()` instead of `new StateNode<T>()`. See
 * {@link createStateNode}.
 */
class StateNode {
    path;
    static STATE_TYPE = 'state';
    constructor(path) {
        this.path = path;
        // @ts-ignore
        this._type = StateNode.STATE_TYPE; // avoiding strange random behavior where instanceof doesn't work
    }
    /**
     * @returns the Nimbus Expression corresponding to this StateNode
     */
    toString() {
        return `@{${this.path}}`;
    }
    /**
     * This is a Nimbus Action. It translates to the setState action. Use this to change the value of this StateNode.
     *
     * @param value the new value.
     * @returns an instance of Action corresponding to a setState for this StateNode
     */
    set(value) {
        const [, id] = this.path.match(/(\w+)\.?(.*)/) ?? [];
        if ((0, lodash_1.isEmpty)(id))
            throw new Error("Can't set state because state path is empty or invalid.");
        return (0, set_state_1.setState)({ path: this.path, value });
    }
    at(index) {
        return new StateNode(`${this.path}[${index}]`);
    }
    get(key) {
        return new StateNode(`${this.path}.${key}`);
    }
    static isState(value) {
        return value instanceof StateNode || value?._type === StateNode.STATE_TYPE;
    }
}
exports.StateNode = StateNode;
/**
 * A State in a Nimbus application is a data structure used to store values at runtime. It is equivalent to variables
 * in a common programming language. It is important to remember that the state is only a reference, since the actual
 * value will be calculated in the front-end only, when running the server-driven screen.
 *
 * Attention: this should only be used for referring to the "globalState" or any implicit state.
 * To declare a new state, please use: `createState` instead.
 *
 * Implicit states are generally used in actions or components, the sendRequest action, for instance, has the
 * onSuccess function, which receives an implicit state named "onSuccess" that is created by the action itself. This
 * state is considered implicit because it's not created by the developer. A component example is the list view, where
 * each iteration can be referred through a StateNode named "item".
 *
 * You'll probably never need to create StateNodes yourself unless you're creating a complex action or component.
 *
 * @param id the id of the state
 * @returns an instance of StateNode
 */
function createStateNode(id) {
    return new StateNode(id);
}
exports.createStateNode = createStateNode;
