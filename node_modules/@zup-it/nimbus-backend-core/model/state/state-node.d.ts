import { Expression } from '../../types';
import { Action } from '../action';
import { State } from './types';
/**
 * For better typing, you should use `createStateNode<T>()` instead of `new StateNode<T>()`. See
 * {@link createStateNode}.
 */
export declare class StateNode<T> {
    readonly path: string;
    private static STATE_TYPE;
    constructor(path: string);
    /**
     * @returns the Nimbus Expression corresponding to this StateNode
     */
    toString(): string;
    /**
     * This is a Nimbus Action. It translates to the setState action. Use this to change the value of this StateNode.
     *
     * @param value the new value.
     * @returns an instance of Action corresponding to a setState for this StateNode
     */
    set(value: Expression<T>): Action;
    at(index: number): StateNode<any>;
    get(key: string): StateNode<any>;
    static isState(value: any | undefined | null): boolean;
}
/**
 * A State in a Nimbus application is a data structure used to store values at runtime. It is equivalent to variables
 * in a common programming language. It is important to remember that the state is only a reference, since the actual
 * value will be calculated in the front-end only, when running the server-driven screen.
 *
 * Attention: this should only be used for referring to the "globalState" or any implicit state.
 * To declare a new state, please use: `createState` instead.
 *
 * Implicit states are generally used in actions or components, the sendRequest action, for instance, has the
 * onSuccess function, which receives an implicit state named "onSuccess" that is created by the action itself. This
 * state is considered implicit because it's not created by the developer. A component example is the list view, where
 * each iteration can be referred through a StateNode named "item".
 *
 * You'll probably never need to create StateNodes yourself unless you're creating a complex action or component.
 *
 * @param id the id of the state
 * @returns an instance of StateNode
 */
export declare function createStateNode<T>(id: string): State<T>;
