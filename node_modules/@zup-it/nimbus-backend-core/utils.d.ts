import { InterpolatedText } from './types';
/**
 * Verifies if the value passed as parameter is an instance of StateNode or Operation. i.e. if it's a Nimbus
 * expression.
 *
 * @param data the value to check
 * @returns true if data is an instance of StateNode or Operation. False otherwise.
 */
export declare const isDynamicExpression: (data: any) => boolean;
/**
 * Checks if the program is running in development mode.
 *
 * @returns true if `process.env.NODE_ENV` is unset or `"development"`
 */
export declare const isDevelopmentMode: () => boolean;
/**
 * Enables hot reloading if the environment is development and if the program has started with the environment variable
 * `HOT_RELOADING=true`.
 *
 * This must be called as soon as the server becomes available.
 *
 * @example
 * If you're using express:
 * ```typescript
 * const expressApp = express()
 *
 * expressApp.listen(port, () => {
 *  console.log(`App listening at http://localhost:${port}`)
 *  setupHotReloading()
 * })
 * ```
 */
export declare function setupHotReloading(): void;
/**
 * Checks if a map contains any value different than null or undefined.
 *
 * @param map the map to look for values.
 * @returns true if the map contains any value, false otherwise.
 */
export declare const hasAnyValue: (map: Record<string, any>) => boolean;
export declare const childrenToInterpolatedText: (children: InterpolatedText) => string;
